name: Acceptance Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, converted_to_draft, ready_for_review]
    branches:
      - main

  push:
    branches:
      - main

  workflow_dispatch:

concurrency:
  group: acceptance-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  checks: write
  pull-requests: write

jobs:
  acceptance-tests:
    name: E2E Acceptance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Run acceptance tests
        uses: DEFRA/forms-acceptance-tests/run-journey-tests@main
        with:
          formsDesignerCommitHash: ${{ github.sha }}

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            // Build comment body
            let body = `## 🧪 Acceptance Test Results\n\n`;

            if (context.job.status === 'success') {
              body += `### ✅ All acceptance tests passed!\n\n`;
            } else {
              body += `### ❌ Some acceptance tests failed\n\n`;
            }

            body += `[View Details](${runUrl}) | [Artifacts](${runUrl})`;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🧪 Acceptance Test Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }